import {
  instrument
} from "./chunk-NPFPQFT7.js";
import {
  require_build
} from "./chunk-XERGQUNS.js";
import "./chunk-5A4BHAZS.js";
import "./chunk-PETULK6Q.js";
import "./chunk-ZNLJH6MQ.js";
import {
  init_es_array_find
} from "./chunk-4PKLNEWX.js";
import {
  init_es_weak_map
} from "./chunk-2K2VH37C.js";
import "./chunk-WLOP7TSV.js";
import "./chunk-IVVNH2JO.js";
import "./chunk-IBCUF72M.js";
import "./chunk-ZJECFIZW.js";
import {
  init_es_object_values
} from "./chunk-4GVBIGBD.js";
import {
  init_es_array_from,
  init_es_array_includes,
  init_es_array_map,
  init_es_function_name,
  init_es_object_assign,
  init_es_object_entries,
  init_es_string_includes
} from "./chunk-Z3LQFYXW.js";
import {
  init_es_symbol,
  init_es_symbol_description,
  init_es_symbol_iterator
} from "./chunk-BXSB2ZQE.js";
import {
  init_es_promise
} from "./chunk-OR3PUS74.js";
import "./chunk-VULSSTUM.js";
import {
  init_web_immediate
} from "./chunk-HGL44CUE.js";
import {
  init_es_array_filter
} from "./chunk-F7GEHYAT.js";
import {
  init_es_array_slice,
  init_es_object_freeze,
  init_es_object_keys,
  init_es_regexp_to_string,
  init_web_dom_collections_for_each
} from "./chunk-D7ZOSUKA.js";
import "./chunk-DFWZR2XL.js";
import "./chunk-5KKL3VGP.js";
import "./chunk-6EWVFYNX.js";
import {
  esm_default,
  init_esm
} from "./chunk-LL5DI3MT.js";
import {
  require_browser
} from "./chunk-JWS2JXAD.js";
import {
  init_es_set,
  init_es_string_replace,
  require_es_regexp_exec
} from "./chunk-UX5IPCER.js";
import {
  init_es_array_concat,
  init_web_dom_collections_iterator,
  require_es_array_iterator,
  require_es_string_iterator
} from "./chunk-A3DETW4S.js";
import {
  init_es_object_to_string
} from "./chunk-OYWHYBAA.js";
import {
  require_window
} from "./chunk-CL6LBA5O.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@storybook/addon-interactions/dist/esm/preset/preview.js
init_es_object_to_string();
init_es_object_entries();
init_es_function_name();
init_es_symbol();
init_es_symbol_description();
init_es_symbol_iterator();
var import_es_array_iterator3 = __toESM(require_es_array_iterator());
var import_es_string_iterator3 = __toESM(require_es_string_iterator());
init_web_dom_collections_iterator();
init_es_array_slice();
init_es_array_from();
var import_es_regexp_exec3 = __toESM(require_es_regexp_exec());

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/index.js
init_es_object_assign();
init_es_object_to_string();
init_web_dom_collections_for_each();
init_es_object_values();
init_es_promise();
var import_global2 = __toESM(require_window());

// node_modules/@storybook/addon-interactions/node_modules/@storybook/channels/dist/esm/index.js
init_es_object_freeze();
init_es_array_slice();
init_es_object_to_string();
init_es_regexp_to_string();
init_web_immediate();
init_es_object_keys();
init_es_array_filter();
init_web_dom_collections_for_each();
var import_util_deprecate = __toESM(require_browser());
init_esm();
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var generateRandomId = function generateRandomId2() {
  return Math.random().toString(16).slice(2);
};
var Channel = function() {
  function Channel2() {
    var _this = this;
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, transport = _ref.transport, _ref$async = _ref.async, async = _ref$async === void 0 ? false : _ref$async;
    _classCallCheck(this, Channel2);
    this.isAsync = void 0;
    this.sender = generateRandomId();
    this.events = {};
    this.data = {};
    this.transport = void 0;
    this.addPeerListener = (0, import_util_deprecate.default)(function(eventName, listener) {
      _this.addListener(eventName, listener);
    }, esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      channel.addPeerListener is deprecated\n    "]))));
    this.isAsync = async;
    if (transport) {
      this.transport = transport;
      this.transport.setHandler(function(event) {
        return _this.handleEvent(event);
      });
    }
  }
  _createClass(Channel2, [{
    key: "hasTransport",
    get: function get() {
      return !!this.transport;
    }
  }, {
    key: "addListener",
    value: function addListener(eventName, listener) {
      this.events[eventName] = this.events[eventName] || [];
      this.events[eventName].push(listener);
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this2 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var event = {
        type: eventName,
        args,
        from: this.sender
      };
      var options = {};
      if (args.length >= 1 && args[0] && args[0].options) {
        options = args[0].options;
      }
      var handler = function handler2() {
        if (_this2.transport) {
          _this2.transport.send(event, options);
        }
        _this2.handleEvent(event);
      };
      if (this.isAsync) {
        setImmediate(handler);
      } else {
        handler();
      }
    }
  }, {
    key: "last",
    value: function last(eventName) {
      return this.data[eventName];
    }
  }, {
    key: "eventNames",
    value: function eventNames() {
      return Object.keys(this.events);
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventName) {
      var listeners = this.listeners(eventName);
      return listeners ? listeners.length : 0;
    }
  }, {
    key: "listeners",
    value: function listeners(eventName) {
      var listeners2 = this.events[eventName];
      return listeners2 || void 0;
    }
  }, {
    key: "once",
    value: function once3(eventName, listener) {
      var onceListener = this.onceListener(eventName, listener);
      this.addListener(eventName, onceListener);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      if (!eventName) {
        this.events = {};
      } else if (this.events[eventName]) {
        delete this.events[eventName];
      }
    }
  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      var listeners = this.listeners(eventName);
      if (listeners) {
        this.events[eventName] = listeners.filter(function(l) {
          return l !== listener;
        });
      }
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      this.addListener(eventName, listener);
    }
  }, {
    key: "off",
    value: function off(eventName, listener) {
      this.removeListener(eventName, listener);
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(event) {
      var listeners = this.listeners(event.type);
      if (listeners && listeners.length) {
        listeners.forEach(function(fn2) {
          fn2.apply(event, event.args);
        });
      }
      this.data[event.type] = event.args;
    }
  }, {
    key: "onceListener",
    value: function onceListener(eventName, listener) {
      var _this3 = this;
      var onceListener2 = function onceListener3() {
        _this3.removeListener(eventName, onceListener3);
        return listener.apply(void 0, arguments);
      };
      return onceListener2;
    }
  }]);
  return Channel2;
}();
var esm_default2 = Channel;

// node_modules/@storybook/addon-interactions/node_modules/@storybook/client-logger/dist/esm/index.js
init_es_array_concat();
var import_es_array_iterator = __toESM(require_es_array_iterator());
init_es_object_to_string();
init_es_set();
var import_es_string_iterator = __toESM(require_es_string_iterator());
init_web_dom_collections_iterator();
var import_es_regexp_exec = __toESM(require_es_regexp_exec());
init_es_string_replace();
var import_global = __toESM(require_window());
var LOGLEVEL = import_global.default.LOGLEVEL;
var console = import_global.default.console;
var levels = {
  trace: 1,
  debug: 2,
  info: 3,
  warn: 4,
  error: 5,
  silent: 10
};
var currentLogLevelString = LOGLEVEL;
var currentLogLevelNumber = levels[currentLogLevelString] || levels.info;
var logger = {
  trace: function trace(message) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
    return currentLogLevelNumber <= levels.trace && console.trace.apply(console, [message].concat(rest));
  },
  debug: function debug(message) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }
    return currentLogLevelNumber <= levels.debug && console.debug.apply(console, [message].concat(rest));
  },
  info: function info(message) {
    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }
    return currentLogLevelNumber <= levels.info && console.info.apply(console, [message].concat(rest));
  },
  warn: function warn(message) {
    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      rest[_key4 - 1] = arguments[_key4];
    }
    return currentLogLevelNumber <= levels.warn && console.warn.apply(console, [message].concat(rest));
  },
  error: function error(message) {
    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      rest[_key5 - 1] = arguments[_key5];
    }
    return currentLogLevelNumber <= levels.error && console.error.apply(console, [message].concat(rest));
  },
  log: function log(message) {
    for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      rest[_key6 - 1] = arguments[_key6];
    }
    return currentLogLevelNumber < levels.silent && console.log.apply(console, [message].concat(rest));
  }
};
var logged = /* @__PURE__ */ new Set();
var once = function once2(type) {
  return function(message) {
    if (logged.has(message))
      return void 0;
    logged.add(message);
    for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      rest[_key7 - 1] = arguments[_key7];
    }
    return logger[type].apply(logger, [message].concat(rest));
  };
};
once.clear = function() {
  return logged.clear();
};
once.trace = once("trace");
once.debug = once("debug");
once.info = once("info");
once.warn = once("warn");
once.error = once("error");
once.log = once("log");
var pretty = function pretty2(type) {
  return function() {
    var argArray = [];
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }
    if (args.length) {
      var startTagRe = /<span\s+style=(['"])([^'"]*)\1\s*>/gi;
      var endTagRe = /<\/span>/gi;
      var reResultArray;
      argArray.push(args[0].replace(startTagRe, "%c").replace(endTagRe, "%c"));
      while (reResultArray = startTagRe.exec(args[0])) {
        argArray.push(reResultArray[2]);
        argArray.push("");
      }
      for (var j = 1; j < args.length; j++) {
        argArray.push(args[j]);
      }
    }
    logger[type].apply(logger, argArray);
  };
};
pretty.trace = pretty("trace");
pretty.debug = pretty("debug");
pretty.info = pretty("info");
pretty.warn = pretty("warn");
pretty.error = pretty("error");

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/storybook-channel-mock.js
function mockChannel() {
  var transport = {
    setHandler: function setHandler() {
    },
    send: function send() {
    }
  };
  return new esm_default2({
    transport
  });
}

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/types.js
init_es_array_find();
init_es_object_to_string();
init_es_object_values();
var types;
(function(types2) {
  types2["TAB"] = "tab";
  types2["PANEL"] = "panel";
  types2["TOOL"] = "tool";
  types2["TOOLEXTRA"] = "toolextra";
  types2["PREVIEW"] = "preview";
  types2["NOTES_ELEMENT"] = "notes-element";
})(types || (types = {}));

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/index.js
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var AddonStore = _createClass2(function AddonStore2() {
  var _this = this;
  _classCallCheck2(this, AddonStore2);
  this.loaders = {};
  this.elements = {};
  this.config = {};
  this.channel = void 0;
  this.serverChannel = void 0;
  this.promise = void 0;
  this.resolve = void 0;
  this.getChannel = function() {
    if (!_this.channel) {
      _this.setChannel(mockChannel());
    }
    return _this.channel;
  };
  this.getServerChannel = function() {
    if (!_this.serverChannel) {
      throw new Error("Accessing non-existent serverChannel");
    }
    return _this.serverChannel;
  };
  this.ready = function() {
    return _this.promise;
  };
  this.hasChannel = function() {
    return !!_this.channel;
  };
  this.hasServerChannel = function() {
    return !!_this.serverChannel;
  };
  this.setChannel = function(channel2) {
    _this.channel = channel2;
    _this.resolve();
  };
  this.setServerChannel = function(channel2) {
    _this.serverChannel = channel2;
  };
  this.getElements = function(type) {
    if (!_this.elements[type]) {
      _this.elements[type] = {};
    }
    return _this.elements[type];
  };
  this.addPanel = function(name, options) {
    _this.add(name, Object.assign({
      type: types.PANEL
    }, options));
  };
  this.add = function(name, addon) {
    var type = addon.type;
    var collection = _this.getElements(type);
    collection[name] = Object.assign({
      id: name
    }, addon);
  };
  this.setConfig = function(value) {
    Object.assign(_this.config, value);
  };
  this.getConfig = function() {
    return _this.config;
  };
  this.register = function(name, registerCallback) {
    if (_this.loaders[name]) {
      logger.warn("".concat(name, " was loaded twice, this could have bad side-effects"));
    }
    _this.loaders[name] = registerCallback;
  };
  this.loadAddons = function(api) {
    Object.values(_this.loaders).forEach(function(value) {
      return value(api);
    });
  };
  this.promise = new Promise(function(res) {
    _this.resolve = function() {
      return res(_this.getChannel());
    };
  });
});
var KEY = "__STORYBOOK_ADDONS";
function getAddonsStore() {
  if (!import_global2.default[KEY]) {
    import_global2.default[KEY] = new AddonStore();
  }
  return import_global2.default[KEY];
}
var addons = getAddonsStore();

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/make-decorator.js
init_es_function_name();
init_es_array_concat();

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/hooks.js
var import_es_array_iterator2 = __toESM(require_es_array_iterator());
init_es_object_to_string();
var import_es_string_iterator2 = __toESM(require_es_string_iterator());
init_es_weak_map();
init_web_dom_collections_iterator();
init_es_set();
init_web_dom_collections_for_each();
init_es_array_includes();
init_es_string_includes();
init_es_function_name();
init_es_array_map();
init_es_array_concat();
init_es_object_entries();
init_es_object_keys();
init_es_symbol();
init_es_symbol_description();
init_es_symbol_iterator();
init_es_array_from();
init_es_array_slice();
var import_es_regexp_exec2 = __toESM(require_es_regexp_exec());
var import_global3 = __toESM(require_window());

// node_modules/@storybook/addon-interactions/node_modules/@storybook/core-events/dist/esm/index.js
var events;
(function(events2) {
  events2["CHANNEL_CREATED"] = "channelCreated";
  events2["CONFIG_ERROR"] = "configError";
  events2["STORY_INDEX_INVALIDATED"] = "storyIndexInvalidated";
  events2["STORY_SPECIFIED"] = "storySpecified";
  events2["SET_STORIES"] = "setStories";
  events2["SET_CURRENT_STORY"] = "setCurrentStory";
  events2["CURRENT_STORY_WAS_SET"] = "currentStoryWasSet";
  events2["FORCE_RE_RENDER"] = "forceReRender";
  events2["FORCE_REMOUNT"] = "forceRemount";
  events2["PRELOAD_STORIES"] = "preloadStories";
  events2["STORY_PREPARED"] = "storyPrepared";
  events2["STORY_CHANGED"] = "storyChanged";
  events2["STORY_UNCHANGED"] = "storyUnchanged";
  events2["STORY_RENDERED"] = "storyRendered";
  events2["STORY_MISSING"] = "storyMissing";
  events2["STORY_ERRORED"] = "storyErrored";
  events2["STORY_THREW_EXCEPTION"] = "storyThrewException";
  events2["STORY_RENDER_PHASE_CHANGED"] = "storyRenderPhaseChanged";
  events2["UPDATE_STORY_ARGS"] = "updateStoryArgs";
  events2["STORY_ARGS_UPDATED"] = "storyArgsUpdated";
  events2["RESET_STORY_ARGS"] = "resetStoryArgs";
  events2["SET_GLOBALS"] = "setGlobals";
  events2["UPDATE_GLOBALS"] = "updateGlobals";
  events2["GLOBALS_UPDATED"] = "globalsUpdated";
  events2["REGISTER_SUBSCRIPTION"] = "registerSubscription";
  events2["PREVIEW_KEYDOWN"] = "previewKeydown";
  events2["SELECT_STORY"] = "selectStory";
  events2["STORIES_COLLAPSE_ALL"] = "storiesCollapseAll";
  events2["STORIES_EXPAND_ALL"] = "storiesExpandAll";
  events2["DOCS_RENDERED"] = "docsRendered";
  events2["SHARED_STATE_CHANGED"] = "sharedStateChanged";
  events2["SHARED_STATE_SET"] = "sharedStateSet";
  events2["NAVIGATE_URL"] = "navigateUrl";
  events2["UPDATE_QUERY_PARAMS"] = "updateQueryParams";
})(events || (events = {}));
var CHANNEL_CREATED = events.CHANNEL_CREATED;
var CONFIG_ERROR = events.CONFIG_ERROR;
var STORY_INDEX_INVALIDATED = events.STORY_INDEX_INVALIDATED;
var STORY_SPECIFIED = events.STORY_SPECIFIED;
var SET_STORIES = events.SET_STORIES;
var SET_CURRENT_STORY = events.SET_CURRENT_STORY;
var CURRENT_STORY_WAS_SET = events.CURRENT_STORY_WAS_SET;
var FORCE_RE_RENDER = events.FORCE_RE_RENDER;
var FORCE_REMOUNT = events.FORCE_REMOUNT;
var STORY_PREPARED = events.STORY_PREPARED;
var STORY_CHANGED = events.STORY_CHANGED;
var STORY_UNCHANGED = events.STORY_UNCHANGED;
var PRELOAD_STORIES = events.PRELOAD_STORIES;
var STORY_RENDERED = events.STORY_RENDERED;
var STORY_MISSING = events.STORY_MISSING;
var STORY_ERRORED = events.STORY_ERRORED;
var STORY_THREW_EXCEPTION = events.STORY_THREW_EXCEPTION;
var STORY_RENDER_PHASE_CHANGED = events.STORY_RENDER_PHASE_CHANGED;
var UPDATE_STORY_ARGS = events.UPDATE_STORY_ARGS;
var STORY_ARGS_UPDATED = events.STORY_ARGS_UPDATED;
var RESET_STORY_ARGS = events.RESET_STORY_ARGS;
var SET_GLOBALS = events.SET_GLOBALS;
var UPDATE_GLOBALS = events.UPDATE_GLOBALS;
var GLOBALS_UPDATED = events.GLOBALS_UPDATED;
var REGISTER_SUBSCRIPTION = events.REGISTER_SUBSCRIPTION;
var PREVIEW_KEYDOWN = events.PREVIEW_KEYDOWN;
var SELECT_STORY = events.SELECT_STORY;
var STORIES_COLLAPSE_ALL = events.STORIES_COLLAPSE_ALL;
var STORIES_EXPAND_ALL = events.STORIES_EXPAND_ALL;
var DOCS_RENDERED = events.DOCS_RENDERED;
var SHARED_STATE_CHANGED = events.SHARED_STATE_CHANGED;
var SHARED_STATE_SET = events.SHARED_STATE_SET;
var NAVIGATE_URL = events.NAVIGATE_URL;
var UPDATE_QUERY_PARAMS = events.UPDATE_QUERY_PARAMS;
var IGNORED_EXCEPTION = new Error("ignoredException");

// node_modules/@storybook/addon-interactions/node_modules/@storybook/addons/dist/esm/hooks.js
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var globalWindow = import_global3.default.window;
var HooksContext = function() {
  function HooksContext2() {
    var _this = this;
    _classCallCheck3(this, HooksContext2);
    this.hookListsMap = void 0;
    this.mountedDecorators = void 0;
    this.prevMountedDecorators = void 0;
    this.currentHooks = void 0;
    this.nextHookIndex = void 0;
    this.currentPhase = void 0;
    this.currentEffects = void 0;
    this.prevEffects = void 0;
    this.currentDecoratorName = void 0;
    this.hasUpdates = void 0;
    this.currentContext = void 0;
    this.renderListener = function(storyId) {
      if (storyId !== _this.currentContext.id)
        return;
      _this.triggerEffects();
      _this.currentContext = null;
      _this.removeRenderListeners();
    };
    this.init();
  }
  _createClass3(HooksContext2, [{
    key: "init",
    value: function init() {
      this.hookListsMap = /* @__PURE__ */ new WeakMap();
      this.mountedDecorators = /* @__PURE__ */ new Set();
      this.prevMountedDecorators = this.mountedDecorators;
      this.currentHooks = [];
      this.nextHookIndex = 0;
      this.currentPhase = "NONE";
      this.currentEffects = [];
      this.prevEffects = [];
      this.currentDecoratorName = null;
      this.hasUpdates = false;
      this.currentContext = null;
    }
  }, {
    key: "clean",
    value: function clean() {
      this.prevEffects.forEach(function(effect) {
        if (effect.destroy) {
          effect.destroy();
        }
      });
      this.init();
      this.removeRenderListeners();
    }
  }, {
    key: "getNextHook",
    value: function getNextHook() {
      var hook = this.currentHooks[this.nextHookIndex];
      this.nextHookIndex += 1;
      return hook;
    }
  }, {
    key: "triggerEffects",
    value: function triggerEffects() {
      var _this2 = this;
      this.prevEffects.forEach(function(effect) {
        if (!_this2.currentEffects.includes(effect) && effect.destroy) {
          effect.destroy();
        }
      });
      this.currentEffects.forEach(function(effect) {
        if (!_this2.prevEffects.includes(effect)) {
          effect.destroy = effect.create();
        }
      });
      this.prevEffects = this.currentEffects;
      this.currentEffects = [];
    }
  }, {
    key: "addRenderListeners",
    value: function addRenderListeners() {
      this.removeRenderListeners();
      var channel2 = addons.getChannel();
      channel2.on(STORY_RENDERED, this.renderListener);
    }
  }, {
    key: "removeRenderListeners",
    value: function removeRenderListeners() {
      var channel2 = addons.getChannel();
      channel2.removeListener(STORY_RENDERED, this.renderListener);
    }
  }]);
  return HooksContext2;
}();

// node_modules/@storybook/addon-interactions/dist/esm/preset/preview.js
var import_jest_mock = __toESM(require_build());
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var JestMock = new import_jest_mock.ModuleMocker(global);
var fn = JestMock.fn.bind(JestMock);
var _instrument = instrument({
  action: fn
}, {
  retain: true
});
var action = _instrument.action;
var channel = addons.getChannel();
var spies = [];
channel.on(FORCE_REMOUNT, function() {
  return spies.forEach(function(mock) {
    var _mock$mockClear;
    return mock === null || mock === void 0 ? void 0 : (_mock$mockClear = mock.mockClear) === null || _mock$mockClear === void 0 ? void 0 : _mock$mockClear.call(mock);
  });
});
channel.on(STORY_RENDER_PHASE_CHANGED, function(_ref) {
  var newPhase = _ref.newPhase;
  if (newPhase === "loading")
    spies.forEach(function(mock) {
      var _mock$mockClear2;
      return mock === null || mock === void 0 ? void 0 : (_mock$mockClear2 = mock.mockClear) === null || _mock$mockClear2 === void 0 ? void 0 : _mock$mockClear2.call(mock);
    });
});
var addActionsFromArgTypes = function addActionsFromArgTypes2(_ref2) {
  var id = _ref2.id, initialArgs = _ref2.initialArgs;
  return Object.entries(initialArgs).reduce(function(acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], val = _ref4[1];
    if (typeof val === "function" && val.name === "actionHandler") {
      Object.defineProperty(val, "name", {
        value: key,
        writable: false
      });
      Object.defineProperty(val, "__storyId__", {
        value: id,
        writable: false
      });
      acc[key] = action(val);
      spies.push(acc[key]);
      return acc;
    }
    acc[key] = val;
    return acc;
  }, {});
};
var argsEnhancers = [addActionsFromArgTypes];
export {
  argsEnhancers
};
//# sourceMappingURL=@storybook_addon-interactions_preview__js.js.map
